(*
Copyright 1986 Tim Boldt

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*)

PROGRAM MINER;

USES
 TURTLEGRAPHICS, APPLESTUFF;
 
CONST
 D = 20;
 DIRT = 1;
 WATER = 6;
 LADDER = 7;
 ELEV = 25;
 SPACE = 50;
 
TYPE
 MINISHAPES = PACKED ARRAY [0..3, 0..3] OF BOOLEAN;
 SHAPES = PACKED ARRAY [0..9, 0..9] OF BOOLEAN;
 SCREEN = PACKED ARRAY [0..49, 0..49] OF 1..50;
 
VAR
 SHAPE : PACKED ARRAY [1..50] OF SHAPES;
 MINI : PACKED ARRAY [1..35] OF MINISHAPES;
 MINE : SCREEN;
 SHAPEFILE : FILE OF SHAPES;
 SCREENFILE : FILE OF PACKED ARRAY [0..49] OF 1..50;
 MINIFILE : FILE OF MINISHAPES;
 DATAFILE : FILE OF INTEGER;
 X, Y, XO, YO, BASEX, BASEY, DX, DY : INTEGER;
 P0, P1 : 0..255;
 LOOP, DIR, VEC, VECO : INTEGER;
 FALLING : INTEGER;
 DIRX, DIRY, ENERGY, MONEY, CASH : INTEGER;
 UD : 0..1;
 SKILL : INTEGER;
 REFILLING, ELEVATING : BOOLEAN;

FUNCTION SCRNX (XX : INTEGER) : INTEGER;
BEGIN
 SCRNX := (XX - BASEX) * 10
END;

FUNCTION SCRNY (YY : INTEGER) : INTEGER;
BEGIN
 SCRNY := (YY - BASEY) * 10
END;

PROCEDURE WAIT (TIME : INTEGER);
BEGIN
 REPEAT
  TIME := TIME - 1
 UNTIL TIME < 0
END;

PROCEDURE ERASE (XX : INTEGER; YY : INTEGER);
BEGIN
 DRAWBLOCK (SHAPE [50], 2,0,0,10,10, SCRNX (XX), SCRNY (YY), 10)
END;

PROCEDURE DRAW (SHNUM : INTEGER; XX : INTEGER; YY : INTEGER);
BEGIN
 DRAWBLOCK (SHAPE [SHNUM], 2,0,0,10,10, XX, YY, 6);
END;

PROCEDURE ONE;
BEGIN
 NOTE (28, D);
 NOTE (23, D);
 NOTE (19, D);
 NOTE (23, D);
 NOTE (28, D);
 NOTE (23, D)
END;
 
PROCEDURE TWO;
BEGIN
 NOTE (30, D);
 NOTE (23, D);
 NOTE (31, D);
 NOTE (23, D);
 NOTE (30, D);
 NOTE (23, D)
END;

PROCEDURE THREE;
BEGIN
 NOTE (31, D);
 NOTE (23, D);
 NOTE (30, D);
 NOTE (23, D);
 NOTE (31, D);
 NOTE (23, D)
END;

PROCEDURE FOUR;
BEGIN
 NOTE (15, D);
 NOTE (23, D);
 NOTE (11, D);
 NOTE (23, D);
 NOTE (15, D);
 NOTE (23, D)
END;

PROCEDURE FIVE;
BEGIN
 NOTE (16, D);
 NOTE (23, D);
 NOTE (19, D);
 NOTE (23, D);
 NOTE (28, D);
 NOTE (23, D)
END;

PROCEDURE WIN;
BEGIN
 INITTURTLE;
 PENCOLOR (NONE);
 MOVETO (10, 180);
 WSTRING ('YOU HAVE WON!!!');
 MOVETO (10, 170);
 WSTRING ('YOU RETIRE IN STYLE.');
 MOVETO (10, 150);
 WSTRING ('PRESS ^RESET TO PLAY AGAIN...');
 REPEAT
  ONE; ONE; TWO; THREE;
  ONE; ONE; TWO; NOTE (28, 100);
  FOUR; FIVE; TWO; THREE;
  FOUR; FIVE; TWO; NOTE (28, 100);
  NOTE (0, 200)
 UNTIL FALSE
END;

PROCEDURE NT (PITCH, MULT : INTEGER);
BEGIN
 NOTE (PITCH, 320 DIV MULT)
END;

PROCEDURE BANKRUPT;
BEGIN
 FILLSCREEN (BLACK1);
 PENCOLOR (NONE);
 MOVETO (10, 180);
 WSTRING ('YOU WENT BANKRUPT!!!');
 MOVETO (10, 170);
 WSTRING ('YOU GIVE UP MINING AND TAKE UP FARMING.');
 MOVETO (10, 150);
 WSTRING ('PRESS ^RESET TO PLAY AGAIN...');
 REPEAT
  FOR LOOP := 1 TO 5 DO NT (24, 4);
  NT (27, 4); NT (26, 4); NT (24, 4);
  FOR LOOP := 1 TO 5 DO NT (23, 4);
  NT (26, 4); NT (24, 4); NT (23, 4);
  FOR LOOP := 1 TO 5 DO NT (24, 4);
  NT (27, 4); NT (26, 4); NT (24, 4);
  NT (23, 4); NT (26, 4); NT (31, 4);
  NT (23, 4); NT (24, 2); NT (24, 2);
  NOTE (0, 250)
 UNTIL FALSE
END;

PROCEDURE CHEN;
BEGIN
 IF (ENERGY < 50) AND NOT REFILLING THEN NOTE (40, 3);
 IF ENERGY <= 0
  THEN
   BEGIN
    ENERGY := 0;
    PENCOLOR (NONE);
    MOVETO (15, 190);
    PENCOLOR (BLACK2);
    MOVETO (265, 190)
   END
  ELSE
   BEGIN
    PENCOLOR (NONE);
    MOVETO (15, 190);
    PENCOLOR (ORANGE);
    MOVE (ENERGY DIV 2);
    PENCOLOR (BLACK2);
    MOVETO (265, 190)
   END;
END;

PROCEDURE CHMO;
BEGIN
 IF MONEY <= 0
  THEN
   BEGIN
    MONEY := 0;
    PENCOLOR (NONE);
    MOVETO (15, 187);
    PENCOLOR (BLACK1);
    MOVETO (265, 187)
   END
  ELSE
   IF MONEY > 5000
    THEN
     WIN
    ELSE
     BEGIN
      PENCOLOR (NONE);
      MOVETO (15, 187);
      PENCOLOR (GREEN);
      MOVE (MONEY DIV 20);
      PENCOLOR (BLACK1);
      MOVETO (265, 187)
     END;
END;

PROCEDURE DEPOSIT;
VAR
 PITCH : INTEGER;
BEGIN
 WHILE (CASH > 0) DO
  BEGIN
   CASH := CASH - 10;
   MONEY := MONEY + 10;
   PITCH := MONEY DIV 200 + 1;
   NOTE (PITCH, 4);
   CHMO
  END;
 IF CASH < 0
  THEN 
   BEGIN
    MONEY := MONEY + CASH;
    CASH := 0
   END;
 CHMO
END;

PROCEDURE REFILL;
VAR
 PITCH : INTEGER;
BEGIN
 REFILLING := TRUE;
 WHILE (MONEY > 0) AND (ENERGY < 500) DO
  BEGIN
   ENERGY := ENERGY + 10;
   MONEY := MONEY - 10;
   PITCH := ENERGY DIV 10 + 1;
   NOTE (PITCH, 4);
   CHEN; CHMO;
  END;
 IF MONEY < 0
  THEN 
   BEGIN
    ENERGY := ENERGY + MONEY;
    MONEY := 0
   END;
 CHEN; CHMO;
 REFILLING := FALSE
END;

PROCEDURE FIXSCREEN; FORWARD;

PROCEDURE DRAWMINI;
VAR
 MININUMB : INTEGER;
BEGIN
 VIEWPORT (0, 279, 175, 191);
 FILLSCREEN (BLACK1);
 VIEWPORT (0, 279, 0, 174);
 FILLSCREEN (BLACK2);
 VIEWPORT (0, 279, 0, 191);
 MOVETO (40, 191);
 PENCOLOR (WHITE1);
 MOVE (198);
 FOR DY := 47 DOWNTO 1 DO
  FOR DX := 0 TO 49 DO
   BEGIN
    MININUMB := MINE [DX, DY];
    IF MININUMB = 50
     THEN MININUMB := 35
     ELSE IF MININUMB > 10 THEN MININUMB := MININUMB - 10;
    DRAWBLOCK (MINI [MININUMB], 2, 0, 0, 4, 4, DX * 4 + 40, DY * 4 - 1, 10)
   END;
 PENCOLOR (NONE);
 MOVETO (40, 2);
 PENCOLOR (WHITE2);
 MOVE (198);
 REPEAT
  DRAWBLOCK (MINI [34], 2, 0, 0, 4, 4, X * 4 + 40, Y * 4 - 1, 6);
  WAIT (500)
 UNTIL BUTTON (1) OR BUTTON (0);
 FIXSCREEN;
END;

PROCEDURE DRAWSCREEN;
VAR
 XS, YS : INTEGER;
BEGIN
 VIEWPORT (0, 279, 180 + (26 - BASEY) * 10, 1000);
 FILLSCREEN (BLACK1);
 VIEWPORT (0, 279, 0, 179 + (26 - BASEY) * 10);
 FILLSCREEN (BLACK2);
 VIEWPORT (0, 279, 0, 191);
 YS := 170; DY := BASEY + 17;
 REPEAT
  BEGIN
   XS := 0; DX := BASEX;
   REPEAT
    BEGIN
     DRAW (MINE [DX, DY], XS, YS);
     XS := XS + 10; DX := DX + 1
    END;
   UNTIL XS = 280;
   YS := YS - 10; DY := DY - 1
  END
 UNTIL YS = -10;
 CHEN; CHMO;
 IF NOT ELEVATING
  THEN
    IF FALLING = 0
     THEN DRAW (VECO + 2, SCRNX (X), SCRNY (Y))
     ELSE DRAW (17, SCRNX (X), SCRNY (Y))
  ELSE
   BEGIN
    DRAW (25, SCRNX (X), SCRNY (Y));
    DRAW (27, SCRNX (X), SCRNY (Y))
   END
END;

PROCEDURE RESTORE;
BEGIN
 RESET (DATAFILE, '%: MINER.OLD.VAR');
 BASEX := DATAFILE^;
 GET (DATAFILE);
 BASEY := DATAFILE^;
 GET (DATAFILE);
 X := DATAFILE^;
 GET (DATAFILE);
 Y := DATAFILE^;
 GET (DATAFILE);
 VECO := DATAFILE^;
 GET (DATAFILE);
 FALLING := DATAFILE^;
 GET (DATAFILE);
 ENERGY := DATAFILE^;
 GET (DATAFILE);
 MONEY := DATAFILE^;
 GET (DATAFILE);
 CASH := DATAFILE^;
 CLOSE (DATAFILE)
END;

PROCEDURE SAVESCREEN;
BEGIN
 REWRITE (DATAFILE, '%: MINER.OLD.VAR');
 DATAFILE^ := BASEX;
 PUT (DATAFILE);
 DATAFILE^ := BASEY;
 PUT (DATAFILE);
 DATAFILE^ := X;
 PUT (DATAFILE);
 DATAFILE^ := Y;
 PUT (DATAFILE);
 DATAFILE^ := VECO;
 PUT (DATAFILE);
 DATAFILE^ := FALLING;
 PUT (DATAFILE);
 DATAFILE^ := ENERGY;
 PUT (DATAFILE);
 DATAFILE^ := MONEY;
 PUT (DATAFILE);
 DATAFILE^ := CASH;
 PUT (DATAFILE);
 CLOSE (DATAFILE, LOCK);
 REWRITE (SCREENFILE, '%: MINER.OLD.SCRN');
 FOR DX := 0 TO 49 DO
  BEGIN
   SCREENFILE^ := MINE [DX];
   PUT (SCREENFILE)
  END;
 CLOSE (SCREENFILE, LOCK)
END;

PROCEDURE TITLE;
BEGIN
 FOR DY := 18 DOWNTO 14 DO
  BEGIN
   DRAW (4, 26, DY * 10);
   DRAW (4, 66, DY * 10);
   DRAW (7, 86, DY * 10);
   DRAW (5, 106, DY * 10);
   DRAW (5, 146, DY * 10);
   DRAW (3, 166, DY * 10);
   DRAW (1, 216, DY * 10)
  END;
 DRAW (4, 36, 170);
 DRAW (4, 46, 160);
 DRAW (4, 56, 170);
 DRAW (5, 116, 170);
 DRAW (5, 126, 160);
 DRAW (5, 136, 150);
 FOR DX := 17 TO 19 DO
  BEGIN
   DRAW (3, DX * 10 + 6, 180);
   DRAW (3, DX * 10 + 6, 160);
   DRAW (3, DX * 10 + 6, 140)
  END;
 FOR DX := 22 TO 23 DO
  BEGIN
   DRAW (1, DX * 10 + 6, 180);
   DRAW (1, DX * 10 + 6, 160)
  END;
 DRAW (1, 246, 170);
 DRAW (1, 246, 150);
 DRAW (1, 246, 140)
END;

PROCEDURE TITLEPAGE;
BEGIN
 PENCOLOR (NONE);
 MOVETO (96, 120);
 WSTRING ('BY TIM BOLDT');
 DRAW (14, 76, 120);
 DRAW (11, 190, 120);
 MOVETO (10, 100);
 WSTRING ('ENERGY COST');
 MOVETO (10, 98);
 PENCOLOR (BLUE);
 MOVE (77);
 PENCOLOR (NONE);
 MOVETO (140, 100);
 WSTRING ('METALS & MINERALS');
 MOVETO (140, 98);
 PENCOLOR (BLUE);
 MOVE (119);
 PENCOLOR (NONE);
 FOR DY := 1 TO 6 DO
  DRAW (DY, 10, (6 - DY) * 15 + 5);
 MOVETO (30, 80);
 WSTRING ('DIRT.......4');
 MOVETO (30, 65);
 WSTRING ('SANDSTONE.10');
 MOVETO (30, 50);
 WSTRING ('LIMESTONE.15');
 MOVETO (30, 35);
 WSTRING ('GRANITE...25');
 MOVETO (30, 20);
 WSTRING ('BEDROCK...40');
 MOVETO (30, 5);
 WSTRING ('WATER.....30');
 FOR DY := 40 TO 43 DO
  DRAW (DY, 140, (45 - DY) * 15 + 5);
 MOVETO (160, 80);
 WSTRING ('SILVER');
 MOVETO (160, 65);
 WSTRING ('GOLD');
 MOVETO (160, 50);
 WSTRING ('PLATINUM');
 MOVETO (160, 35);
 WSTRING ('GEMS')
END;

PROCEDURE INSTRUCTIONS;
BEGIN
 MOVETO (0, 180);
 WSTRING ('INSTRUCTIONS:');
 MOVETO (10, 160);
 WSTRING ('JOYSTICK TO MOVE/DIG');
 MOVETO (10, 150);
 WSTRING ('BUTTON 0 TO DRILL');
 MOVETO (10, 140);
 WSTRING ('BUTTON 1 FOR LADDER (8 PTS ENERGY)');
 MOVETO (10, 130);
 WSTRING ('*> RESCUE ($500)');
 MOVETO (10, 120);
 WSTRING ('$> SAVE SCREEN');
 MOVETO (10, 110);
 WSTRING ('E> QUICK ELEVATOR');
 MOVETO (10, 100);
 WSTRING ('M> MAP');
 MOVETO (10, 90);
 WSTRING ('+> RESTART');
 MOVETO (10, 80);
 WSTRING ('YOU START WITH $1000 & 500 FUEL');
 MOVETO (10, 70);
 WSTRING ('($1 BUYS 1 UNIT OF FUEL)');
 MOVETO (10, 60);
 WSTRING ('WATCH OUT FOR SPRINGS AND CAVE-INS...');
 MOVETO (10, 40);
 WSTRING ('SHAPE DESIGN ASSISTANT: TERRY BOLDT')
END;

PROCEDURE MUSIC; FORWARD;

PROCEDURE N (PITCH : INTEGER; MULT : INTEGER);
CONST
 DD = 160;
BEGIN
 IF BUTTON (0) OR BUTTON (1) THEN EXIT (MUSIC);
 NOTE (PITCH, DD DIV MULT)
END;

PROCEDURE MUSIC;
BEGIN
 REPEAT
  N (12, 4); N (17, 2); N (21, 4); N (17, 4); N (0, 4);
  N (12, 4); N (17, 2); N (21, 4); N (17, 4); N (0, 4);
  N (12, 4); N (17, 2); N (19, 4); N (21, 4); N (19, 4);
  N (17, 4); N (16, 2); N (17, 4); N (19, 4); N (0, 4);
  N (12, 4); N (17, 2); N (21, 4); N (17, 4); N (0, 4);
  N (12, 4); N (17, 2); N (21, 4); N (17, 4); N (0, 2);
  N (17, 4); N (19, 4); N (21, 4); N (19, 2); N (21, 4);
  N (17, 4); N (0, 2);  NOTE (2, 10);
  NOTE (0, 250)
 UNTIL FALSE
END;

PROCEDURE INIT;
BEGIN
 INITTURTLE;
 RESET (SHAPEFILE, '%: MINER.SH');
 FOR LOOP := 1 TO 50 DO
  BEGIN
   SHAPE [LOOP] := SHAPEFILE^;
   GET (SHAPEFILE)
  END;
 CLOSE (SHAPEFILE);
 RESET (MINIFILE, '%: MINER.MINI.SH');
 FOR LOOP := 1 TO 35 DO
  BEGIN
   MINI [LOOP] := MINIFILE^;
   GET (MINIFILE)
  END;
 CLOSE (MINIFILE);
 FILLSCREEN (BLACK2);
 TITLE;
 TITLEPAGE;
 MUSIC;
 FILLSCREEN (BLACK);
 INSTRUCTIONS;
 PENCOLOR (NONE);
 MOVETO (73, 10);
 WSTRING ('SKILL LEVEL (1-8)?');
 GET (KEYBOARD);
 WHILE NOT ((KEYBOARD^ > '0') AND (KEYBOARD^ < '9')) DO
  BEGIN
   WRITE (CHR (7));
   GET (KEYBOARD)
  END;
 SKILL := ORD (KEYBOARD^) - 48;
 MOVETO (73, 10);
 BASEX := 22; BASEY := 32;
 X := 45; Y := 46; VECO := 12; VEC := 12; FALLING := 0;
 ENERGY := 500; MONEY := 1000; CASH := 0;
 WSTRING ('N(EW OR O(LD SCREEN?');
 GET (KEYBOARD);
 WHILE NOT (KEYBOARD^ IN ['O','N']) DO
  BEGIN
   WRITE (CHR (7));
   GET (KEYBOARD)
  END;
 CASE KEYBOARD^ OF
  'O': BEGIN
        RESTORE;
        VEC := VECO;
        RESET (SCREENFILE, '%: MINER.OLD.SCRN')
       END;
  'N': RESET (SCREENFILE, '%: MINER.SCRN')
  END;
 FOR DX := 0 TO 49 DO
  BEGIN
   MINE [DX] := SCREENFILE^;
   GET (SCREENFILE)
  END;
 CLOSE (SCREENFILE);
 RANDOMIZE;
 DRAWSCREEN;
END;

PROCEDURE FIXSCREEN;
BEGIN
 BASEX := X - 14;
 BASEY := Y - 9;
 IF BASEX > 22 THEN BASEX := 22;
 IF BASEX < 2 THEN BASEX := 0;
 IF BASEY > 32 THEN BASEY := 32;
 IF BASEY < 2 THEN BASEY := 0;
 DRAWSCREEN;
 IF FALLING <> 0 THEN FALLING := 30
END;

PROCEDURE CHECKSCREEN;
BEGIN
 IF (Y>2) AND (Y<47) THEN IF ABS (Y - BASEY - 8.5) >= 7.5 THEN FIXSCREEN;
 IF (X>2) AND (X<47) THEN IF ABS (X - BASEX - 13.5) >= 12.5 THEN FIXSCREEN;
END;

PROCEDURE FALL;
BEGIN
 FALLING := 30;
 DRAW (VEC + 2, SCRNX (X), SCRNY (Y));
 REPEAT
  DRAW (16, SCRNX (X), SCRNY (Y) - 5);
  DRAW (16, SCRNX (X), SCRNY (Y) - 5);
  DRAW (17, SCRNX (X), SCRNY (Y) - 10);
  Y := Y - 1;
  NOTE (FALLING, 10);
  FALLING := FALLING - 1;
  CHECKSCREEN;
  DRAW (17, SCRNX (X), SCRNY (Y))
 UNTIL MINE [X, Y - 1] <> SPACE;
 DRAW (VEC + 2, SCRNX (X), SCRNY (Y));
 FALLING := 0
END;

PROCEDURE DIGUD;
BEGIN
 IF ENERGY < 4 THEN EXIT (DIGUD);
 ENERGY := ENERGY - 4;
 CHEN;
 PENCOLOR (NONE);
 FOR LOOP := 1 TO 8 DO
  BEGIN
   MOVETO (SCRNX (X) + 5, SCRNY (Y) + 5 + DIR * 6);
   PENCOLOR (ORANGE);
   NOTE (3, 3);
   MOVETO (SCRNX (X) + LOOP, SCRNY (Y) + 5 + DIR * 14);
   PENCOLOR (BLACK2)
  END;
 ERASE (X, Y + DIR);
 MINE [X, Y + DIR] := SPACE;
 CHECKSCREEN
END;

PROCEDURE DIG;
BEGIN
 IF UD = 1 THEN BEGIN
             DIGUD;
             EXIT (DIG)
            END;
 DRAW (VECO + 2, SCRNX (X - DIR), SCRNY (Y));
 VECO := ROUND (10.5 + 1.5 * DIR); VEC := VECO; 
 DRAW (VECO + 2, SCRNX (X - DIR), SCRNY (Y));
 PENCOLOR (NONE);
 FOR LOOP := 9 DOWNTO 1 DO
  BEGIN
   MOVETO (SCRNX (X) - DIR * 4 + 4, SCRNY (Y) + 5);
   PENCOLOR (ORANGE);
   NOTE (3, 3);
   MOVETO (SCRNX (X) + DIR * 3 + 4, SCRNY (Y) + LOOP);
   PENCOLOR (BLACK2)
  END;
 ERASE (X, Y);
 MINE [X, Y] := SPACE;
 ENERGY := ENERGY - 4;
 CHEN
END;

PROCEDURE WALK;
VAR
 SHIFT : INTEGER;
BEGIN
 VEC := ROUND (10.5 + 1.5 * DIR); SHIFT := 0;
 DRAW (VECO + 2, SCRNX (XO), SCRNY (Y));
 FOR LOOP := 1 TO 2 DO
  BEGIN
   SHIFT := SHIFT + 1;
   DRAW (VEC + 3, SCRNX (XO) + DIR * SHIFT, SCRNY (Y));
   DRAW (VEC + 3, SCRNX (XO) + DIR * SHIFT, SCRNY (Y));
   SHIFT := SHIFT + 3;
   DRAW (VEC + 1, SCRNX (XO) + DIR * SHIFT, SCRNY (Y));
   DRAW (VEC + 1, SCRNX (XO) + DIR * SHIFT, SCRNY (Y));
   SHIFT := SHIFT + 1;
   DRAW (VEC + 2, SCRNX (XO) + DIR * SHIFT, SCRNY (Y));
   IF SHIFT <> 10 THEN DRAW (VEC + 2, SCRNX (XO) + DIR * SHIFT, SCRNY (Y))
  END;
 VECO := VEC;
 CHECKSCREEN
END;

PROCEDURE SPLATUD;
BEGIN
 ENERGY := ENERGY - 1;
 CHEN;
 PENCOLOR (NONE);
 FOR LOOP := 9 DOWNTO 1 DO
  BEGIN
   MOVETO (SCRNX (X) + 5, SCRNY (Y) + 5 + DIR * 6);
   PENCOLOR (ORANGE);
   NOTE (13, 3);
   MOVETO (SCRNX (X) + LOOP, SCRNY (Y) + 5 + DIR * 7);
   PENCOLOR (BLACK2)
  END
END;

PROCEDURE SPLAT;
BEGIN
 IF UD = 1 THEN BEGIN
             SPLATUD;
             EXIT (SPLAT)
            END;
 DRAW (VECO + 2, SCRNX (X - DIR), SCRNY (Y));
 VECO := ROUND (10.5 + 1.5 * DIR); VEC := VECO; 
 DRAW (VECO + 2, SCRNX (X - DIR), SCRNY (Y));
 PENCOLOR (NONE);
 FOR LOOP := 9 DOWNTO 1 DO
  BEGIN
   MOVETO (SCRNX (X) - DIR * 4 + 4, SCRNY (Y) + 5);
   PENCOLOR (ORANGE);
   NOTE (13, 3);
   MOVETO (SCRNX (X) - DIR * 3 + 4, SCRNY (Y) + LOOP);
   PENCOLOR (BLACK2)
  END;
 ENERGY := ENERGY - 1;
 CHEN
END;

PROCEDURE CAVEIN;
BEGIN
 VIEWPORT (0, 279, 0, 179);
 FOR LOOP := 1 TO 20 DO
  BEGIN
   REPEAT
    DIRX := (RANDOM MOD 11) - 5;
    DIRY := (RANDOM MOD 11) - 5
   UNTIL ((DIRX + (1 - UD) * DIR) <> 0) OR ((DIRY) <> 0);
   IF ((X + DIRX) > 0) AND ((X + DIRX) < 47) AND
    ((Y + DIRY) > 0) AND ((Y + DIRY) < 44)
    THEN
     BEGIN
      ERASE (X + DIRX, Y + DIRY);
      DRAW (DIRT, SCRNX (X + DIRX), SCRNY (Y + DIRY));
      NOTE (2, 10);
      MINE [X + DIRX, Y + DIRY] := DIRT
     END
  END;
 VIEWPORT (0, 279, 0, 191)
END;
   
PROCEDURE SPRING;
VAR
 SX, SY : INTEGER;
BEGIN
 FOR SY := Y DOWNTO 1 DO
  BEGIN
   NOTE (1, 1);
   FOR SX := 1 TO 46 DO
    BEGIN
     IF MINE [SX, SY] = SPACE
      THEN
       BEGIN
        DRAW (WATER, SCRNX (SX), SCRNY (SY));
        MINE [SX, SY] := WATER
       END
    END
  END;
 IF MINE [X, Y] = WATER
  THEN
   BEGIN
    DRAW (WATER, SCRNX (X), SCRNY (Y));
    MINE [X, Y] := SPACE
   END
END;

PROCEDURE TRY2DIG;
VAR
 KIND, STUFF : INTEGER;
BEGIN
 IF ENERGY < 4 THEN EXIT (TRY2DIG);
 KIND := RANDOM MOD 25;
 CASE KIND OF
  0, 1, 2, 3, 4: BEGIN
            STUFF := (RANDOM MOD 50 + 50 - Y) DIV 25 + 2;
            SPLAT;
            ERASE (X, Y + UD * DIR);
            DRAW (STUFF, SCRNX (X), SCRNY (Y + UD * DIR));
            MINE [X, Y + UD * DIR] := STUFF
           END;
  5: BEGIN
      STUFF := (RANDOM MOD 200 + 43 - Y) DIV 74 + 40;
      IF STUFF = 43 THEN STUFF := STUFF - (RANDOM MOD 2);
      IF STUFF = 42 THEN STUFF := STUFF - (RANDOM MOD 2);
      DIG;
      DRAW (STUFF, SCRNX (X), SCRNY (Y + UD * DIR));
      MINE [X, Y + UD * DIR] := STUFF
     END;
  6: BEGIN
      DIG;
      STUFF := (RANDOM MOD 60 + 43 - Y) DIV 35;
      CASE STUFF OF
       1: CAVEIN;
       2: SPRING
       END
     END
  END;
 IF KIND > 6 THEN DIG
END;

PROCEDURE FINDCASH;
VAR
 VALUE : INTEGER;
BEGIN
 VALUE := RANDOM MOD 3 + RANDOM MOD 3 + 1;
 CASE MINE [X, Y + UD * DIR] OF
  40: VALUE := VALUE * 200;
  41: VALUE := VALUE * 350;
  42: VALUE := VALUE * 500;
  43: VALUE := VALUE * 1250
 END;
 CASH := CASH + VALUE DIV (SKILL + 1);
 ERASE (X, Y + UD * DIR);
 NOTE (24, 20);
 NOTE (19, 20);
 NOTE (19, 20);
 NOTE (20, 40);
 NOTE (19, 20);
 NOTE (0, 40);
 NOTE (23, 20);
 NOTE (24, 20);
 MINE [X, Y + UD * DIR] := SPACE
END;

PROCEDURE DRILL;
VAR
 ECOST : INTEGER;
BEGIN
 CASE MINE [X, Y + UD * DIR] OF
  2: ECOST := 5;
  3: ECOST := 10;
  4: ECOST := 20;
  5: ECOST := 35;
  6: ECOST := 25
  END;
 IF (ENERGY <  (ECOST + 5)) OR (NOT BUTTON (0)) THEN EXIT (DRILL);
 SPLAT;
 DIG;
 ERASE (X, Y + UD * DIR);
 ENERGY := ENERGY - ECOST;
 MINE [X, Y + UD * DIR] := SPACE;
 CHEN
END;
 
PROCEDURE LEFTRIGHT;
BEGIN
 DIR := ABS (DIR) DIV DIR;
 UD := 0;
 XO := X;
 X := X + DIR;
 CASE MINE [X, Y] OF
  2, 3, 4, 5, 6: DRILL;
  32, 33: REFILL;
  37, 39: DEPOSIT;
  40, 41, 42, 43: FINDCASH
  END; 
 IF (MINE [X, Y] = DIRT) AND (X <= 47) THEN TRY2DIG;
 IF ((MINE [X, Y] <> SPACE) AND (MINE [X, Y] <> ELEV) AND
  (MINE [X, Y] <> LADDER)) OR (X > 47) THEN
   BEGIN
    X := XO;
    EXIT (LEFTRIGHT)
   END;
 WALK
END;

PROCEDURE FASTELEV;
VAR
 EY : INTEGER;
BEGIN
 FILLSCREEN (BLACK1);
 PENCOLOR (NONE);
 MOVETO (10, 180);
 WSTRING ('DEPTH 1-5 OR S(AME:');
 GET (KEYBOARD);
 IF KEYPRESS THEN GET (KEYBOARD);
 EY := 46;
 CASE KEYBOARD^ OF
  'S': IF Y < 47 THEN EY := Y;
  '5': EY := 1;
  '4': EY := 10;
  '3': EY := 20;
  '2': EY := 30;
  '1': EY := 46
  END;
 IF MINE [X, Y] = ELEV THEN Y := EY;
 FOR LOOP := 1 TO EY DO
  MINE [47, LOOP] := 50;
 FOR LOOP := EY + 1 TO 47 DO
  MINE [47, LOOP] := 24;
 MINE [47, EY] := 25;
 FIXSCREEN;
END;
        
PROCEDURE GOELEV;
BEGIN
 ELEVATING := TRUE;
 DRAW (VEC + 2, SCRNX (X), SCRNY (Y));
 DRAW (25, SCRNX (X), SCRNY (Y));
 REPEAT
  DIR := DIR DIV ABS (DIR);
  DRAW (27, SCRNX (X), SCRNY (Y) + 5 * DIR);
  DRAW (27, SCRNX (X), SCRNY (Y) + 5 * DIR);
  DRAW (27, SCRNX (X), SCRNY (Y) + 10 * DIR);
  IF DIR < 0
   THEN
    BEGIN
     MINE [X, Y] := 24;
     DRAW (24, SCRNX (X), SCRNY (Y))
    END
   ELSE
    BEGIN
     MINE [X, Y] := 50;
     DRAW (24, SCRNX (X), SCRNY (Y + 1))
    END;
  Y := Y + DIR;
  MINE [X, Y] := 25;
  CHECKSCREEN;
  DIR := 128 - PADDLE (1); IF DIR = 0 THEN DIR := 1;
  IF (Y = 46) OR (Y = 1) THEN DIR := 0;
  DRAW (27, SCRNX (X), SCRNY (Y))
 UNTIL ABS (DIR) < 80;
 ELEVATING := FALSE;
 DRAW (VEC + 2, SCRNX (X), SCRNY (Y));
 DRAW (25, SCRNX (X), SCRNY (Y))
END;

PROCEDURE CLIMB;
BEGIN 
 FALLING := 1;
 DRAW (VEC + 2, SCRNX (X), SCRNY (Y));
 REPEAT
  IF ABS (DIR) > 1 THEN DIR := ABS (DIR) DIV DIR;
  DRAW (16, SCRNX (X), SCRNY (Y) + 5 * DIR);
  WAIT (100);
  DRAW (16, SCRNX (X), SCRNY (Y) + 5 * DIR);
  DRAW (17, SCRNX (X), SCRNY (Y) + 10 * DIR);
  Y := Y + DIR;
  DIR := 128 - PADDLE (1); IF DIR = 0 THEN DIR := 1;
  IF ABS (DIR) > 80
   THEN DIR := ABS (DIR) DIV DIR
   ELSE DIR := 0;
  IF (MINE [X, Y + DIR] <> LADDER) AND (MINE [X, Y + DIR] <> SPACE)
   THEN DIR := 0;
  IF (DIR > 0) AND (MINE [X, Y] <> LADDER) THEN DIR := 0;
  IF (MINE [X, Y] = SPACE) AND (MINE [X, Y + DIR] = SPACE)
   THEN DIR := 0;
  WAIT (100);
  CHECKSCREEN;
  DRAW (17, SCRNX (X), SCRNY (Y))
 UNTIL DIR = 0;
 FALLING := 0;
 DRAW (VEC + 2, SCRNX (X), SCRNY (Y))
END;

PROCEDURE UPDOWN;
BEGIN
 DIR := ABS (DIR) DIV DIR;
 UD := 1;
 CASE MINE [X, Y + DIR] OF
  2, 3, 4, 5, 6: DRILL;
  40, 41, 42, 43: FINDCASH
  END;
 IF MINE [X, Y + DIR] = DIRT
  THEN
   BEGIN
    TRY2DIG;
    EXIT (UPDOWN)
   END;
 IF (MINE [X, Y + DIR] <> SPACE) AND (MINE [X, Y + DIR] <> LADDER)
  AND (MINE [X, Y] <> ELEV) THEN EXIT (UPDOWN);
 CASE MINE [X, Y] OF
  25 : IF ((Y + DIR) < 47) AND ((Y + DIR) > 0) THEN GOELEV;
  7, 50 : IF (DIR < 0) THEN CLIMB ELSE IF (MINE [X, Y] = LADDER) THEN CLIMB
  END
END;
 
PROCEDURE MAKELAD;
BEGIN
 REPEAT UNTIL NOT BUTTON (1);
 IF ENERGY < 8 THEN EXIT (MAKELAD);
 DIRX := PADDLE (0) - 128;
 IF ABS (DIRX) < 80
  THEN DIRX := 0
  ELSE DIRX := DIRX DIV ABS (DIRX);
 WAIT (5);
 DIRY := 128 - PADDLE (1);
 IF ABS (DIRY) < 80
  THEN DIRY := 0
  ELSE DIRY := DIRY DIV ABS (DIRY);
 IF (MINE [X + DIRX, Y + DIRY] = SPACE) AND ((X + DIRX) < 47) AND
  ((Y + DIRY) < 44)
  THEN
   BEGIN
    MINE [X + DIRX, Y + DIRY] := LADDER;
    NOTE (50, 7); NOTE (20, 3);
    DRAW (LADDER, SCRNX (X + DIRX), SCRNY (Y + DIRY));
    ENERGY := ENERGY - 8;
    CHEN
   END;
 REPEAT
  DIRX := ABS (PADDLE (0) - 128);
  WAIT (       IF ABS (DIR) > 80 THEN UPDOWN
      END;
   UNTIL KEYPRESS;
   GET (KEYBOARD);
   CASE KEYBOARD^ OF
    'E': FASTELEV;
    '*': BEGIN
          MONEY := MONEY + CASH - 500;
          CASH := 0;
          IF MONEY < 0 THEN BANKRUPT;
          X := 30; Y := 46;
          FIXSCREEN
         END;
    'M': DRAWMINI;
    '$': SAVESCREEN
    END
  UNTIL KEYBOARD^ = '+';
 UNTIL FALSE
END.
                                                                                                                          